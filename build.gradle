buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    // This should be below the net.minecraftforge.gradle plugin
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    // Mixin Plugin
    id 'org.spongepowered.mixin' version '0.7.+'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

String version_type = "beta"

base {
    archivesName = "maidsoulkitchen"
    version = "${minecraft_version}-${version_type}-v${mod_version}"
    group = mod_group_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    flatDir {
        dir 'libs'
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        // Patchouli
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }

    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }

    maven {
        url "https://maven.shedaniel.me/"
    }

    maven {
        url = "https://maven.theillusivec4.top/"
    }
}


// 联动(烹饪)
dependencies {
    /** ---------------------------------------农夫乐事--------------------------------------------------------- */
    implementation fg.deobf("curse.maven:farmers-delight-398521:${farmers_delight_file_id}")
    implementation fg.deobf("curse.maven:miners-delight-plus-689630:${miners_delight_plus_file_id}")
    implementation fg.deobf("curse.maven:my-nethers-delight-1003673:${my_nethers_delight_file_id}")
    compileOnly fg.deobf(jarJar("com.tterrag.registrate:Registrate:${registrate_version}")){
        transitive = false
        jarJar.ranged(it, "[MC1.20-1.3.11,)")
    }
    compileOnly files("lib/l2serial-1.2.2.jar")
    compileOnly files("lib/l2modularblock-1.1.0.jar")
    compileOnly files("lib/l2library-2.4.25-slim.jar")
    compileOnly files("lib/l2damagetracker-0.3.7.jar")
    implementation fg.deobf("curse.maven:youkais-homecoming-957437:${ykhc_file_id}")
    implementation fg.deobf("curse.maven:bnc-1-20-port-898078:${bnc_file_id}")
    implementation fg.deobf("curse.maven:farmers-respite-551453:5543547")
    implementation fg.deobf("maven.modrinth:cuisine-delight:8N27V2V5")
    implementation fg.deobf("curse.maven:barbeques-delight-1007788:5848042")
//    implementation fg.deobf("curse.maven:coffee-delight-835597:4871782")

    /** ---------------------------------------Let's do--------------------------------------------------------- */
    implementation fg.deobf("curse.maven:lets-do-meadow-821483:${meadow_file_id}")
    implementation fg.deobf("curse.maven:lets-do-herbal-brews-951221:${herbal_brews_file_id}")
    implementation fg.deobf("curse.maven:lets-do-beachparty-858691:${beachparty_file_id}")
    implementation fg.deobf("curse.maven:vinery-704465:${vinery_file_id}")
    implementation fg.deobf("curse.maven:do-api-864599:${do_api_file_id}")

    //1.0
//    implementation fg.deobf("curse.maven:lets-do-brewery-971636:${brewery_file_id}")
//    implementation fg.deobf("curse.maven:lets-do-bakery-886559:${bakery_file_id}")
//    implementation fg.deobf("curse.maven:lets-do-candlelight-846962:${candlelight_file_id}")
    //2.0
    implementation fg.deobf("curse.maven:lets-do-farm-charm-1038103:${farm_charm_file_id}")
    implementation fg.deobf("curse.maven:lets-do-bakery-farm-charm-compat-1038130:${bakery_farm_charm_file_id}")
    implementation fg.deobf("curse.maven:lets-do-brewery-farm-charm-compat-1038106:${brewery_farm_charm_file_id}")
    implementation fg.deobf("curse.maven:lets-do-candlelight-farm-charm-compat-1038117:${candlelight_farm_charm_file_id}")

    /** ---------------------------------------其他--------------------------------------------------------- */
    implementation fg.deobf("curse.maven:mystias-izakaya-973711:${mystias_izakaya_file_id}")
    implementation fg.deobf("curse.maven:kitchen-karrot-880555:${kitchen_karrot_file_id}")
    implementation fg.deobf("curse.maven:drink-beer-refill-729120:${drink_beer_refill_file_id}")
    implementation fg.deobf("curse.maven:crock-pot-404523:${crock_pot_file_id}")
    implementation fg.deobf("curse.maven:smartpot-1098636:5727794")
}

// 联动(存储)
dependencies {
    implementation fg.deobf("curse.maven:storage-drawers-223852:${storage_drawers_file_id}")
    implementation fg.deobf("curse.maven:toms-storage-378609:5548573")
    implementation fg.deobf("curse.maven:sophisticated-core-618298:5326245")
    implementation fg.deobf("curse.maven:sophisticated-storage-619320:5327377")
}

// 联动(其他)
dependencies {
    compileOnly fg.deobf("curse.maven:serene-seasons-291874:${serene_seasons_file_id}")
    implementation fg.deobf("curse.maven:thirst-was-taken-679270:${thirst_was_taken_file_id}")

    implementation fg.deobf("curse.maven:ecliptic-seasons-1118306:${ecliptic_seasons_file_id}")

    implementation files("lib/fruit-stack-900231-4807247_mapped_parchment_2023.09.03-1.20.1.jar")
    implementation fg.deobf("curse.maven:simple-farming-327554:${simple_farming_file_id}")
//    implementation fg.deobf("curse.maven:hexerei-548599:${hexerei_file_id}")

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    implementation fg.deobf("curse.maven:l2library-620203:5447286")
    implementation fg.deobf("curse.maven:modulargolems-690937:5476223")

    runtimeOnly "curse.maven:kotlin-for-forge-351264:${kotlin_id}"
    runtimeOnly fg.deobf("curse.maven:libipn-679177:${libipn_id}")
    implementation fg.deobf("curse.maven:inventory-profiles-next-495267:${ipn_id}")

    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    implementation fg.deobf("curse.maven:probejs-585406:5227399")
}



// 基础配置
dependencies {
    // 本体
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.0"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.0")) {
        jarJar.ranged(it, "[0.4.0,)")
    }
}

// 开发工具
dependencies {
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    implementation fg.deobf("curse.maven:jade-324717:${jade_file_id}")
    implementation fg.deobf("curse.maven:the-one-probe-245211:${top_file_id}")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_forge}")

    // rei
    compileOnly fg.deobf("curse.maven:architectury-api-419699:${architectury_api_id}")
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")

    // emi
    // Forge (see below block as well if you use Forge Gradle)
    compileOnly fg.deobf("dev.emi:emi-forge:${emi_version}:api")
    compileOnly fg.deobf("dev.emi:emi-forge:${emi_version}")

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
}

// 直属依赖项
dependencies {
    implementation fg.deobf("curse.maven:touhou-little-maid-355044:${touhou_little_maid_file_id}")
}

// api
dependencies {
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    runtimeOnly fg.deobf("curse.maven:kiwi-303657:${kiwi_file_id}")
}

// 开发工具
dependencies {
    runtimeOnly files('lib/quickmodstart-forge-1.20.1-1.0.0.jar')

    runtimeOnly fg.deobf("curse.maven:appleskin-248787:4770828")
    runtimeOnly fg.deobf("curse.maven:nbtedit-reborn-678133:${nbtedit_reborn_id}")
}


// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
